(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[321],{1721:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/case-study/design_decisions/contract_generation",function(){return n(1654)}])},9369:function(e,t,n){"use strict";var i=n(5893);n(7294);let r={logo:(0,i.jsx)(i.Fragment,{children:(0,i.jsx)("img",{src:"/transparent-logo-horizontal-mn.svg",style:{maxHeight:"5rem"},alt:"logo"})}),project:{link:"https://github.com/signet-framework/"},docsRepositoryBase:"https://github.com/signet-framework/case-study",footer:{text:""},editLink:{text:null},feedback:{content:null},head:(0,i.jsx)(i.Fragment,{children:(0,i.jsx)("link",{rel:"icon",type:"image/ico",href:"/signet-favicon-transparent.ico"})})};t.Z=r},1654:function(e,t,n){"use strict";n.r(t);var i=n(5893),r=n(2673),a=n(3931),o=n(9369);n(9966);var s=n(1151);n(5675);let c={MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:t}=Object.assign({},(0,s.ah)(),e.components);return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)},pageOpts:{filePath:"pages/case-study/design_decisions/contract_generation.md",route:"/case-study/design_decisions/contract_generation",headings:[{depth:1,value:"Contract Generation",id:"contract-generation"},{depth:2,value:"Replicate the Provider Approach",id:"replicate-the-provider-approach"},{depth:2,value:"Generate Consumer Contract",id:"generate-consumer-contract"},{depth:3,value:"Recording",id:"recording"},{depth:3,value:"Reading",id:"reading"}],timestamp:1690239778e3,pageMap:[{kind:"Meta",data:{index:{title:"Home",display:"hidden",type:"page"},"case-study-header-link":{title:"Case Study",type:"page",href:"/case-study"},quickstart:"Quickstart","case-study":{title:"Case Study"},about:{title:"About",type:"page"},contact:{title:"Contact â†—",type:"page",href:"https://github.com/signet-framework/",newWindow:!0}}},{kind:"MdxPage",name:"about",route:"/about"},{kind:"Folder",name:"case-study",route:"/case-study",children:[{kind:"Meta",data:{background:"Background",contract_testing:"Contract Testing",signet_framework:"Signet Framework",design_decisions:"Design Decisions"}},{kind:"Folder",name:"background",route:"/case-study/background",children:[{kind:"Meta",data:{monoliths_and_microservices:"Monoliths and Microservices",challenges_testing_microservices:"Challenges Testing Microservices"}},{kind:"MdxPage",name:"challenges_testing_microservices",route:"/case-study/background/challenges_testing_microservices"},{kind:"MdxPage",name:"monoliths_and_microservices",route:"/case-study/background/monoliths_and_microservices"}]},{kind:"MdxPage",name:"contract_testing",route:"/case-study/contract_testing"},{kind:"Folder",name:"design_decisions",route:"/case-study/design_decisions",children:[{kind:"Meta",data:{provider_verification:"Provider Verification",central_document_repository:"Central Document Repository",contract_generation:"Contract Generation"}},{kind:"MdxPage",name:"central_document_repository",route:"/case-study/design_decisions/central_document_repository"},{kind:"MdxPage",name:"contract_generation",route:"/case-study/design_decisions/contract_generation"},{kind:"MdxPage",name:"provider_verification",route:"/case-study/design_decisions/provider_verification"}]},{kind:"Folder",name:"signet_framework",route:"/case-study/signet_framework",children:[{kind:"Meta",data:{usecase:"Use Case"}},{kind:"MdxPage",name:"usecase",route:"/case-study/signet_framework/usecase"}]}]},{kind:"MdxPage",name:"case-study",route:"/case-study"},{kind:"MdxPage",name:"index",route:"/"},{kind:"Folder",name:"quickstart",route:"/quickstart",children:[{kind:"Meta",data:{style_guide:"Style Guide",folders:"Folders and _meta.json",embed_image:"Embed an Image",mdx_with_react:"MDX with React"}},{kind:"MdxPage",name:"embed_image",route:"/quickstart/embed_image"},{kind:"MdxPage",name:"folders",route:"/quickstart/folders"},{kind:"MdxPage",name:"mdx_with_react",route:"/quickstart/mdx_with_react"},{kind:"MdxPage",name:"style_guide",route:"/quickstart/style_guide"}]},{kind:"MdxPage",name:"quickstart",route:"/quickstart"}],flexsearch:{codeblocks:!0},title:"Contract Generation"},pageNextRoute:"/case-study/design_decisions/contract_generation",nextraLayout:a.ZP,themeConfig:o.Z};function d(e){let t=Object.assign({h1:"h1",p:"p",a:"a",h2:"h2",h3:"h3"},(0,s.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{children:"Contract Generation"}),"\n",(0,i.jsxs)(t.p,{children:["At their core, consumer contracts and provider specifications are JSON or YAML files that adhere to a specific schema, which allows them to be written using a text editor.\nHowever, relying on this manual approach introduces the risk of misalignment between the actual service and its corresponding document.\nWhile we have successfully addressed this problem for the provider side through ",(0,i.jsx)(t.a,{href:"https://signet-framework.dev/case-study/design_decisions/provider_verification",children:"provider verification"}),", we now need to tackle the same challenge for the consumer side."]}),"\n",(0,i.jsx)(t.h2,{id:"replicate-the-provider-approach",children:"Replicate the Provider Approach"}),"\n",(0,i.jsx)(t.p,{children:"One option we considered is to replicate the approach used for the provider side.\nEssentially, we'll shift the responsibility of writing the contract onto the developer and offer consumer verification as a Signet feature.\nHowever, we quickly realized that there is no practical benefit to writing a Pact file by hand.\nIn contrast, for OpenAPI Specifications, designing and writing the specification by hand allows for collaboration, a key component of spec-driven development.\nAs collaboration is not beneficial for consumer contracts, we decided that automating the consumer contract generation is more productive for the developer."}),"\n",(0,i.jsx)(t.h2,{id:"generate-consumer-contract",children:"Generate Consumer Contract"}),"\n",(0,i.jsx)(t.p,{children:"Before considering any implementations of this approach, we assumed that teams are already performing consumer service tests that involve sending HTTP requests to a mock provider.\nIn other words, their testing infrastructure has already configured a mocking service.\nFurthermore, their mocking service configuration contains descriptions of the expected HTTP requests and responses between the consumer and provider.\nAssuming this scenario, Signet can extract information from the configured mocking service to generate the consumer contract.\nWe considered two extraction methods, which we refer to as recording and reading, and although both can coexist, we decided only to implement recording."}),"\n",(0,i.jsx)(t.h3,{id:"recording",children:"Recording"}),"\n",(0,i.jsx)(t.p,{children:"This approach involves setting up a passthrough proxy between the consumer and mock provider server to record all HTTP requests and responses during the service tests.\nAfter the tests execute, we can use the recorded data to generate a consumer contract.\nThe benefit of this approach is that it is not code-invasive and is compatible with any HTTP mocking service, allowing easy integration into an existing codebase."}),"\n",(0,i.jsx)(t.h3,{id:"reading",children:"Reading"}),"\n",(0,i.jsx)(t.p,{children:"This approach involves reading the mock service configuration files to extract the expected HTTP requests and responses.\nWe can then use the extracted data to create the consumer contract.\nOne advantage of this approach is that a proxy would no longer be necessary, requiring one less component.\nAlso, since there is no recording, we can generate the consumer contract without executing the service tests.\nThe main disadvantage is that the format of the HTTP request and response definitions would differ depending on the mocking service, requiring us to implement individual support for each service. As such, we decided that this approach was out of our current scope."})]})}t.default=(0,r.j)(c)}},function(e){e.O(0,[533,774,888,179],function(){return e(e.s=1721)}),_N_E=e.O()}]);